@startuml
skinparam classAttributeIconSize 0
skinparam monochrome true
skinparam backgroundColor FloralWhite
hide circle
skinparam linetype ortho


package missiletoad.core {
    class AssetManager {
        -texture_cache_: entt::resource_cache<Texture, TextureLoader>
        -music_cache_: entt::resource_cache<Music, MusicLoader>

        +AssetManager(game: Game*)
        +~AssetManager()
        +push_asset_folder(path: std::string_view, mount_point: std::string_view)
        +pop_asset_folder(mount_point: std::string_view)
        +load<T>(path: std::string_view): entt::resource<T>
    }

    AssetManager --> TextureLoader
    AssetManager --> MusicLoader
    AssetManager ..> Texture
    AssetManager ..> Music
    AssetManager ..* missiletoad.Game


    abstract class BaseSystem {
        +~BaseSystem()
        +on_start()
        +on_update(delta_time: float)
        +on_fixed_update(delta_time: float)
        +on_destroy()
        +on_render()
    }

    class PathFolder {
        +path: std::string
        +mount_point: std::string
    }

    class GameDescriptor {
        +name: std::string
        +default_scene: std::string
        +assets_folders: std::vector<PathFolder>
    }

    GameDescriptor *-- PathFolder

    enum EKey {
        ...
    }

    enum EGamepadButton {
        ...
    }

    enum EGamepadAxis {
        ...
    }

    enum EActionState {
        ...
    }

    enum EMouseButton {
        ...
    }

    class GamepadAxisData {
        +axis: EGamepadAxis
        +gamepad: int
    }

    class GamepadButtonData {
        +button: EGamepadButton
        +gamepad: int
    }

    class AxisButton {
        +positive: std::variant<std::monostate, EKey, EMouseButton, GamepadButtonData>
        +negative: std::variant<std::monostate, EKey, EMouseButton, GamepadButtonData>
    }

    class Axis {
        +axis: std::variant<AxisButton, GamepadAxisData>
        +dead_zone: float
        +weight: float
    }

    class ActionData {
        +actions: std::vector<std::variant<std::monostate, EKey, EMouseButton, GamepadButtonData>>
        +state: EActionState
    }

    class AxisData {
        +axes: std::vector<Axis>
        +value: float
    }

    class InputManager {
        -actions_: std::unordered_map<std::string, ActionData>
        -axes_: std::unordered_map<std::string, AxisData>

        +update()
        +is_key_down(key: EKey): bool
        +is_key_up(key: EKey): bool
        +is_key_pressed(key: EKey): bool
        +is_key_released(key: EKey): bool
        +is_mouse_button_down(button: EMouseButton): bool
        +is_mouse_button_up(button: EMouseButton): bool
        +is_mouse_button_pressed(button: EMouseButton): bool
        +is_mouse_button_released(button: EMouseButton): bool
        +is_gamepad_button_down(gamepad: int, button: EGamepadButton): bool
        +is_gamepad_button_up(gamepad: int, button: EGamepadButton): bool
        +is_gamepad_button_pressed(gamepad: int, button: EGamepadButton): bool
        +is_gamepad_button_released(gamepad: int, button: EGamepadButton): bool
        +get_gamepad_axis(gamepad: int, axis: EGamepadAxis): float
        +add_action(name: std::string_view, action: std::variant<std::monostate, EKey, EMouseButton, GamepadButtonData>)
        +clear_action(name: std::string_view)
        +get_action(name: std::string_view): EActionState
        +is_action_down(name: std::string_view): bool
        +is_action_up(name: std::string_view): bool
        +is_action_pressed(name: std::string_view): bool
        +is_action_released(name: std::string_view): bool
        +add_axis(name: std::string_view, axis: Axis)
        +clear_axis(name: std::string_view)
        +get_axis(name: std::string_view): float
        -process_actions()
        -process_axis()
    }

    missiletoad.Game *-- InputManager
    InputManager *-- ActionData
    InputManager *-- AxisData
    InputManager ..> EKey
    InputManager ..> EMouseButton
    InputManager ..> EGamepadButton
    InputManager ..> EGamepadAxis
    InputManager ..> EActionState
    InputManager ..> Axis
    InputManager ..> AxisButton
    InputManager ..> GamepadAxisData
    InputManager ..> GamepadButtonData

    AxisData *-- Axis
    Axis *-- AxisButton
    Axis *-- GamepadAxisData
    AxisButton *-- GamepadButtonData
    AxisButton *-- EKey
    AxisButton *-- EMouseButton

    GamepadButtonData *-- EGamepadButton
    GamepadAxisData *-- EGamepadAxis

    class SceneDescriptor {
        +name: std::string
        +systems: std::vector<std::string>
    }

    class Scene {
        -scene_entities_: entt::registry
        -systems_: std::vector<std::unique_ptr<BaseSystem>>
        -game_: missiletoad.Game*

        +Scene()
        +~Scene()
        +add_system<T, Args...>(args: Args...)
        +add_system(system: std::unique_ptr<BaseSystem>)
        +on_start()
        +on_destroy()
        +update(delta_time: float)
        +fixed_update(delta_time: float)
        +render()
        +get_registry(): entt::registry&
        +get_systems(): std::vector<std::unique_ptr<BaseSystem>>&
    }

    Scene *-- BaseSystem
    Scene *.. missiletoad.Game

    class SceneManager {
        -active_scene_: std::unique_ptr<Scene>
        -next_scene_: std::optional<std::string>
        -game_: missiletoad.Game*

        +SceneManager(game: missiletoad.Game*)
        +~SceneManager()
        +load_scene(name: std::string_view)
        +add_descriptor(descriptor: SceneDescriptor&&)
        +get_current_scene(): Scene&
    }

    SceneManager *-- SceneDescriptor
    SceneManager *-- Scene
    SceneManager ..> missiletoad.Game

    class Texture {
        -texture_: raylib::Texture

        +Texture()
        +Texture(texture: raylib::Texture&&)
        +Texture(texture: Texture&&)
        +~Texture()
        +operator=(texture: Texture&&): Texture&
        +operator=(texture: raylib::Texture&&): Texture&
        +get_texture(): raylib::Texture&
        +set_texture(texture: raylib::Texture&&)
    }

    class TextureLoader {
        +operator()(name: std::string_view): std::shared_ptr<Texture>
    }

    TextureLoader ..> Texture

    class Timer {
        -callback_: std::function<void()>
        -interval_: std::chrono::duration<float>
        -time_left_: std::chrono::duration<float>
        -is_running_: bool
        -loop_: bool
        +Timer(callback: std::function<void()>)
        +tick(delta_time: std::chrono::duration<float>)
        +start()
        +stop()
        +reset()
        +set_interval(interval: std::chrono::duration<float>)
        +set_loop(loop: bool)
        +is_running(): bool
        +is_looping(): bool
        +get_interval(): std::chrono::duration<float>
        +get_time_left(): std::chrono::duration<float>
    }

    class TimerBuilder {
        -callback_: std::function<void()>
        -interval_: std::chrono::duration<float>
        -loop_: bool

        -TimerBuilder(builder: TimerBuilder&&)
        +TimerBuilder()
        +with_callback(callback: std::function<void()>): TimerBuilder&
        +with_interval(interval: std::chrono::duration<float>): TimerBuilder&
        +with_loop(loop: bool): TimerBuilder&
        +build(): Timer
    }

    TimerBuilder ..> Timer

    class Music {
        -music_: raylib::Music
        -buffer_: std::unique_ptr<uint8_t[]>
        +Music(music: raylib::Music&&, buffer: std::unique_ptr<uint8_t[]>&&)
        +get_music(): raylib::Music&
        +set_music(music: raylib::Music&&)
    }

    class MusicLoader {
        +operator()(name: std::string_view): std::shared_ptr<Music>
    }

    MusicLoader ..> Music

    /'
    Components
    '/

    class BoxCollider2dComponent {
        -fixture: b2Fixture*
        {static} +register_component(ctx: entt::meta_ctx&)
        +BoxCollider2dComponent()
        +set_sensor(sensor: bool)
        +set_friction(friction: float)
        +set_restitution(restitution: float)
        +set_density(density: float)
        +set_size(size: glm::vec2)
        +get_fixture(): b2Fixture*
        +is_sensor(): bool
        +get_friction(): float
        +get_restitution(): float
        +get_density(): float
    }

    class Camer2dComponent {
        -camera_: raylib::Camera2D

        {static} +register_component(ctx: entt::meta_ctx&)
        +set_zoom(zoom: float)
        +set_target(target: glm::vec2)
        +set_offset(offset: glm::vec2)
        +get_zoom(): float
        +get_target(): glm::vec2
        +get_offset(): glm::vec2
        +get_screen_to_world(point: glm::vec2): glm::vec2
        +get_world_to_screen(point: glm::vec2): glm::vec2
        +get_camera(): raylib::Camera2D&
    }

    class Rigidbody2dComponent {
        -body_: b2Body*
        {static} +register_component(ctx: entt::meta_ctx&)
        +set_static(is_static: bool)
        +set_linear_velocity(velocity: glm::vec2)
        +apply_force(force: glm::vec2, point: glm::vec2)
        +apply_force_to_center(force: glm::vec2)
        +apply_torque(torque: float)
        +apply_linear_impulse(impulse: glm::vec2, point: glm::vec2)
        +apply_linear_impulse_to_center(impulse: glm::vec2)
        +set_is_bullet(is_bullet: bool)
        +get_body(): b2Body*
        +is_static(): bool
        +is_dynamic(): bool
        +get_linear_velocity(): glm::vec2
        +get_angular_velocity(): float
        +is_bullet(): bool
        +is_fixed_rotation(): bool
    }

    class SpriteComponent {
       {static} +register_component(ctx: entt::meta_ctx&)
        +texture: entt::resource<Texture>
        +z_index: uint32_t
    }

    SpriteComponent *.. Texture

    class TransformComponent {
        {static} +register_component(ctx: entt::meta_ctx&)
        +position: glm::vec2
        +scale: glm::vec2
        +rotation: float
    }

    class AudioComponent {
        +sound_: entt::resource<Music>
        {static} +register_component(ctx: entt::meta_ctx&)
    }

    AudioComponent *.. Music

    class SpriteAnimation {
        -frame_timer: Timer
        -current_frame: uint32_t
        -is_playing: bool
        -loop: bool

        {static} +register_component(ctx: entt::meta_ctx&)
        +texture_frames: std::vector<entt::resource<Texture>>
        +play()
        +stop()
        +update()
        +reset()
        +set_loop(loop: bool)
        +is_playing(): bool
        +get_current_frame(): uint32_t
        +get_frame_timer(): Timer&
    }

    SpriteAnimation *.. Texture
    SpriteAnimation *-- Timer


    /'
    Systems
    '/

    class PhysicsSystem extends BaseSystem {
        -world_: b2World
        -transform_observer_: entt::observer
        -registry_: entt::registry*
        -game_: missiletoad.Game*
        {static} +register_system(ctx: entt::meta_ctx&)
        +PhysicsSystem(game: Game*)
        +~PhysicsSystem()
        +on_fixed_update(delta_time: float)
        -on_box_collider_created(entt::registry&, entt::entity)
        -on_rigidbody_created(entt::registry&, entt::entity)
    }

    PhysicsSystem *.. missiletoad.Game
    PhysicsSystem ..> BoxCollider2dComponent
    PhysicsSystem ..> Rigidbody2dComponent
    PhysicsSystem ..> TransformComponent

    class RendererSystem extends BaseSystem {
        -registry_: entt::registry*

        {static} +register_system(ctx: entt::meta_ctx&)
        +RendererSystem(game: missiletoad.Game*)
        +on_render()
    }

    RendererSystem *.. missiletoad.Game
    RendererSystem ..> SpriteComponent
    RendererSystem ..> TransformComponent
    RendererSystem ..> Camer2dComponent
    RendererSystem ..> BoxCollider2dComponent
    RendererSystem ..> Rigidbody2dComponent

    class SpriteAnimationSystem extends BaseSystem {
        -registry: entt::registry*

        {static} +register_system(ctx: entt::meta_ctx&)
        +SpriteAnimationSystem(game: missiletoad.Game*)
        +on_update(delta_time: float)
    }

    SpriteAnimationSystem *.. missiletoad.Game
    SpriteAnimationSystem ..> SpriteAnimation
    SpriteAnimationSystem ..> SpriteComponent

    class AudioSystem extends BaseSystem {
        -registry: entt::registry*

        {static} +register_system(ctx: entt::meta_ctx&)
        +AudioSystem(game: missiletoad.Game*)
        +on_update(delta_time: float)
    }

    AudioSystem *.. missiletoad.Game
    AudioSystem ..> AudioComponent
}

package missiletoad {
    class Game {
        -systems_meta_ctx_: entt::meta_ctx
        -components_meta_ctx_: entt::meta_ctx
        -systems_: std::vector<std::unique_ptr<missiletoad.core.BaseSystem>>
        -asset_manager_: missiletoad.core.AssetManager
        -scene_manager_: std::unique_ptr<missiletoad.core.SceneManager>
        -input_manager_: std::unique_ptr<missiletoad.core.InputManager>
        -nuklear_context_: std::unique_ptr<nk_context, void(*)(nk_context*)>
        -window: raylib::Window
        -debug_mode_: bool

        +Game(argc: int, argv: char**)
        +~Game()
        +{static} get_instance(): Game&
        +run(): int
        +close()
        +asset_manager(): missiletoad.core.AssetManager&
        +scene_manager(): missiletoad.core.SceneManager&
        +input_manager(): missiletoad.core.InputManager&
        +systems_meta_ctx(): entt::meta_ctx&
        +components_meta_ctx(): entt::meta_ctx&
        -update(delta_time: float)
        -fixed_update(delta_time: float)
        -render()
        -debug_gui()
    }

    Game *-- missiletoad.core.SceneManager
    Game *-- missiletoad.core.AssetManager
    Game *-- missiletoad.core.BaseSystem
    Game ..> missiletoad.core.GameDescriptor
}

@enduml
