@startuml
skinparam classAttributeIconSize 0
hide circle

package missiletoad {
    class Game
    class SceneManager
    class Scene
    class SceneDescriptor
    abstract BaseSystem
    class Entity
    class InputManager
    class AudioManager
    class AssetManager

    class ResourceLoader<T>
    class ResourceCache<T>
    class ResourceHandle<T>

    class PhysicsSystem extends BaseSystem
    class RenderSystem extends BaseSystem
    class InputSystem extends BaseSystem
    class AudioSystem extends BaseSystem

    class Transform2DComponent
    class Collider2DComponent
    class RigidBody2DComponent
    class SpriteComponent
    class AnimationComponent
    class AudioComponent
    class InputComponent
    class CameraComponent

    class Texture2D
    class Font
    class Sound
    class Music

    Game *-- SceneManager
    Game *-- InputManager
    Game *-- AudioManager
    Game *-- AssetManager

    AssetManager *-- ResourceCache

    ResourceCache *-- ResourceLoader

    SceneManager *-- Scene
    SceneManager *-- SceneDescriptor

    Scene *-- Entity
    Scene *-- BaseSystem

    BaseSystem -- Entity

    PhysicsSystem -- Collider2DComponent
    PhysicsSystem -- RigidBody2DComponent
    PhysicsSystem -- Transform2DComponent

    RenderSystem <-- SpriteComponent
    RenderSystem <-- AnimationComponent
    RenderSystem <-- CameraComponent
    RenderSystem <-- Transform2DComponent

    InputSystem <-- InputComponent

    AudioSystem <-- AudioComponent

    InputManager <-- InputSystem
    AudioManager <-- AudioSystem

    /'
    Find a way to specify the relationship between the entity and its components
    '/

    /'
    Define methods
    '/

    class Game {

    }

    class AssetManager {
        - std::unordered_map<std::string, std::shared_ptr<Texture2D>> textures
        - std::unordered_map<std::string, std::shared_ptr<Font>> fonts
        - std::unordered_map<std::string, std::shared_ptr<Sound>> sounds
        - std::unordered_map<std::string, std::shared_ptr<Music>> music
        - Game &game

        + AssetManager(Game &game)
        + ~AssetManager()
        + std::shared_ptr<Texture2D> load_texture(std::string path)
        + std::shared_ptr<Font> load_font(std::string path)
        + std::shared_ptr<Sound> load_sound(std::string path)
        + std::shared_ptr<Music> load_music(std::string path)
    }

    class Scene {
        - entt::registry registry
        - std::vector<std::unique_ptr<BaseSystem>> systems

        + Scene(Game &game)
        + ~Scene()
        + void update(float dt)
        + void fixed_update(float dt)
        + void render()
        + Entity create_entity()
        + void destroy_entity(Entity entity)
        + void add_system(std::unique_ptr<BaseSystem> system)
        + void remove_system(BaseSystem &system)
        + const std::vector<std::unique_ptr<BaseSystem>>& get_systems()
        + entt::registry& get_registry()
    }

    class Entity {
        - id: uint32_t
        - scene: Scene&

        + Entity(uint32_t id, Scene &scene)
        + uint32_t get_id()
        + Scene& get_scene()
        + void destroy()
        + T& add_component<T>()
        + T& get_component<T>()
        + void remove_component<T>()
        + bool has_component<T>()
    }

    abstract BaseSystem {
        # Scene& scene

        # BaseSystem(Scene& scene)
        + ~BaseSystem()
        + void on_start()
        + void on_update(float dt)
        + void on_fixed_update(float dt)
        + void on_destroy()
        + void on_render()
    }

    class Transform2DComponent {
        +Vector2 position
        +Vector2 scale
        +float rotation

        Transform2DComponent(Vector2 position, Vector2 scale, float rotation)
    }

    class SpriteComponent {
        +std::shared_ptr<Texture2D> texture

        SpriteComponent(Texture2D texture)
    }

    class AnimationComponent {
        +std::vector<std::shared_ptr<Texture2D>> frames
        +float frame_time
        +float current_time
        +uint32_t current_frame

        AnimationComponent(std::vector<std::shared_ptr<Texture2D>> frames, float frame_time)
    }

    class CameraComponent {
        +Camera2D camera

        +CameraComponent(Camera2D camera)
    }

    class ResourceCache<T> {
        - std::unordered_map<std::string, std::shared_ptr<T>> resources

        + ResourceCache()
        + ~ResourceCache()
        + std::shared_ptr<T> load(std::string path)
        + std::shared_ptr<T> get(std::string path)
        + void unload(std::string path)
        + void unload_all()
    }

    class ResourcePtrInner<T> {
        - T *resource
        - size_t *ref_count
        - size_t *weak_ref_count
        - Function<void> deleter

        + ResourcePtrInner(T *resource, size_t *ref_count, size_t *weak_ref_count, std::function<void(T*)> deleter)
        + ~ResourcePtrInner()
        + get(): T*
        + get_ref_count(): size_t
        + get_weak_ref_count(): size_t
        + increment_ref_count()
        + increment_weak_ref_count()
        + decrement_ref_count()
        + decrement_weak_ref_count()
        + delete()
    }

    class ResourcePtr<T> {
        - ResourcePtrInner<T> *inner

        + ResourcePtr(T *resource, std::function<void(T*)> deleter)
        + ResourcePtr(const ResourcePtr<T> &other)
        + ResourcePtr(ResourcePtr<T> &&other)
        + ~ResourcePtr()
        + operator=(const ResourcePtr<T> &other): ResourcePtr<T>&
        + operator=(ResourcePtr<T> &&other): ResourcePtr<T>&
        + get(): T*
        + get_ref_count(): size_t
        + get_weak_ref_count(): size_t
        + increment_ref_count()
        + increment_weak_ref_count()
        + decrement_ref_count()
        + decrement_weak_ref_count()
        + delete()
        + operator->(): T*
        + operator*(): T&
    }

    ResourcePtr *-- ResourcePtrInner

    class ResourceHandle<T> {

    }

    /'
    Game related classes
    '/

    class HealthComponent {
        -float health
        -float max_health

        +HealthComponent(float health, float max_health)

        +void take_damage(float damage)
        +void heal(float amount)
        +bool is_dead()

        +float get_health()
        +float get_max_health()
    }
    class PlayerComponent {
        /' TODO
        '/
    }

    class PlayerSystem extends missiletoad.BaseSystem {
        +PlayerSystem(missiletoad.Scene& scene)
        + void on_start()
        + void on_update(float dt)
        + void on_fixed_update(float dt)
        + void on_destroy()
        + void on_render()
    }

    class EnemyComponent {
        /' TODO
        '/
    }

    class EnemySystem extends missiletoad.BaseSystem {
        +EnemySystem(missiletoad.Scene& scene)
        + void on_start()
        + void on_update(float dt)
        + void on_fixed_update(float dt)
        + void on_destroy()
        + void on_render()
    }

    PlayerSystem --> PlayerComponent
    PlayerSystem --> HealthComponent

    EnemySystem --> EnemyComponent
    EnemySystem --> HealthComponent
}


@enduml
